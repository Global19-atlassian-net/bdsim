from .blockdiagram import BlockDiagram as BlockDiagram
from collections import UserDict
from matplotlib import animation as animation
from typing import Any, List, Optional, Optional as Opt, Sequence, Tuple, Type, TypeVar, Union
from typing_extensions import Literal as Literal

ndarray: Any

class Struct(UserDict):
    name: Any = ...
    def __init__(self, name: str = ...) -> None: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __getattr__(self, name: Any): ...

class Wire:
    name: Any = ...
    id: Any = ...
    start: Any = ...
    end: Any = ...
    value: Any = ...
    type: Any = ...
    def __init__(self, start: Optional[Any] = ..., end: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def info(self) -> None: ...
    def send(self, value: Any) -> Any: ...
    @property
    def fullname(self): ...

class Plug:
    block: Any = ...
    port: Any = ...
    type: Any = ...
    def __init__(self, block: Block, port: int=..., type: Opt[Literal[start, end]]=...) -> None: ...
    @property
    def isslice(self): ...
    @property
    def portlist(self): ...
    @property
    def width(self): ...
    def __mul__(left: Any, right: Union[Block, Plug]) -> Any: ...
    def __setitem__(self, port: int, src: Union[Block, Plug]) -> Any: ...

clocklist: Any

class Clock:
    T: Any = ...
    offset: Any = ...
    name: Any = ...
    def __init__(self, period: float, offset: float=..., unit: str=..., name: str=...) -> None: ...
    def next(self, t: float) -> Any: ...

blocklist: List[Type[Block]]
BlockClass = TypeVar('BlockClass', bound=Type['Block'])

def block(cls: BlockClass) -> BlockClass: ...

class Block:
    type: str
    blockclass: str
    def __new__(cls: Any, *args: Any, bd: Opt[BlockDiagram]=..., **kwargs: Any) -> Any: ...
    name_tex: Any = ...
    name: Any = ...
    pos: Any = ...
    id: Any = ...
    out: Any = ...
    inputs: Any = ...
    updated: bool = ...
    shape: str = ...
    initd: bool = ...
    nin: Any = ...
    nout: Any = ...
    def __init__(self, name: Opt[str]=..., inames: Opt[List[str]]=..., onames: Opt[List[str]]=..., snames: Opt[List[str]]=..., pos: Opt[Tuple[int, int]]=..., nin: Opt[int]=..., nout: Opt[int]=..., bd: Opt[BlockDiagram]=..., *inputs: Union[Block, Plug], **kwargs: Any) -> None: ...
    @property
    def info(self) -> None: ...
    def __getitem__(self, port: Union[int, slice]) -> Any: ...
    def __setitem__(self, port: Union[int, slice], src: Union[Block, Plug]) -> Any: ...
    def __setattr__(self, name: str, value: Union[Block, Plug]) -> Any: ...
    def __mul__(left: Any, right: Union[Block, Plug]) -> Any: ...
    def inport_names(self, names: Sequence[str]) -> Any: ...
    def outport_names(self, names: Sequence[str]) -> Any: ...
    def state_names(self, names: Sequence[str]) -> Any: ...
    def sourcename(self, port: int) -> str: ...
    def reset(self) -> None: ...
    def add_outport(self, w: Any) -> None: ...
    def add_inport(self, w: Any) -> None: ...
    def setinput(self, port: int, value: Any) -> Any: ...
    def setinputs(self, *pos: Any) -> Any: ...
    def start(self, **kwargs: Any) -> Any: ...
    def check(self) -> None: ...
    def output(self, t: float) -> List[Any]: ...
    def step(self) -> None: ...
    def done(self, **kwargs: Any) -> Any: ...

class SinkBlock(Block):
    blockclass: str = ...
    nout: int = ...
    nstates: int = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SourceBlock(Block):
    blockclass: str = ...
    nin: int = ...
    nstates: int = ...
    def __init__(self, **kwargs: Any) -> None: ...

class TransferBlock(Block):
    blockclass: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def reset(self): ...
    def setstate(self, x: Any): ...
    def getstate(self): ...
    def check(self) -> None: ...

class FunctionBlock(Block):
    blockclass: str = ...
    nstates: int = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SubsystemBlock(Block):
    blockclass: str = ...
    nstates: int = ...
    def __init__(self, **kwargs: Any) -> None: ...

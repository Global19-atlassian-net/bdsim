from bdsim.blocks.quad_model import MultiRotorModel as MultiRotorModel
from bdsim.components import Block as Block, Plug as Plug, block as block
from bdsim.graphics import GraphicsBlock as GraphicsBlock
from math import atan2 as atan2, sqrt as sqrt
from matplotlib.axes import Axes
from typing import Any, Callable, Dict, List, Optional as Opt, Sequence, Tuple, Union
from typing_extensions import Literal

StyleSpec = Union[Dict[str, Any], str]
ScaleSpec: Any
FigInitFn = Callable[[Axes], None]
ColorLike = Union[str, Tuple[float, float, float], Tuple[float, float, float, float]]

class Scope(GraphicsBlock):
    type: str = ...
    styles: Any = ...
    labels: Any = ...
    grid: Any = ...
    tdata: Any = ...
    ydata: Any = ...
    line: Any = ...
    scale: Any = ...
    def __init__(self, nin: Opt[int]=..., styles: Opt[Union[StyleSpec, List[StyleSpec]]]=..., scale: ScaleSpec=..., labels: Opt[Sequence[str]]=..., grid: Union[bool, Tuple[Any]]=..., *inputs: Union[Block, Plug], **kwargs: Any) -> None: ...
    fig: Any = ...
    ax: Any = ...
    def start(self, **kwargs: Any) -> None: ...
    def step(self) -> None: ...
    def done(self, block: bool = ..., **kwargs: Any) -> None: ...

class ScopeXY(GraphicsBlock):
    nin: int = ...
    xdata: Any = ...
    ydata: Any = ...
    type: str = ...
    init: Any = ...
    styles: Any = ...
    scale: Any = ...
    labels: Any = ...
    def __init__(self, style: Opt[StyleSpec]=..., *inputs: Any, scale: ScaleSpec=..., labels: List[str]=..., init: Opt[FigInitFn]=..., **kwargs: Any) -> None: ...
    fig: Any = ...
    ax: Any = ...
    def start(self, **kwargs: Any) -> None: ...
    def step(self) -> None: ...
    def done(self, block: bool = ..., **kwargs: Any) -> None: ...

class VehiclePlot(GraphicsBlock):
    xdata: Any = ...
    ydata: Any = ...
    type: str = ...
    init: Any = ...
    square: Any = ...
    path: Any = ...
    pathstyle: Any = ...
    color: Any = ...
    fill: Any = ...
    scale: Any = ...
    labels: Any = ...
    vertices_hom: Any = ...
    vertices: Any = ...
    def __init__(self, *inputs: Union[Block, Plug], path: bool=..., pathstyle: Opt[StyleSpec]=..., shape: Literal[triangle, box]=..., color: ColorLike=..., fill: ColorLike=..., size: float=..., scale: ScaleSpec=..., labels: List[str]=..., square: bool=..., init: Opt[FigInitFn]=..., **kwargs: Any) -> None: ...
    fig: Any = ...
    ax: Any = ...
    vehicle: Any = ...
    def start(self, **kwargs: Any) -> None: ...
    def step(self) -> None: ...
    def done(self, block: bool = ..., **kwargs: Any) -> None: ...

class MultiRotorPlot(GraphicsBlock):
    type: str = ...
    model: Any = ...
    scale: Any = ...
    nrotors: Any = ...
    projection: Any = ...
    flapscale: Any = ...
    def __init__(self, model: MultiRotorModel, *inputs: Union[Block, Plug], scale: Tuple[float, float, float, float, float]=..., flapscale: float=..., projection: Literal[ortho, perspective]=..., **kwargs: Any) -> None: ...
    D: Any = ...
    fig: Any = ...
    ax: Any = ...
    arm: Any = ...
    disk: Any = ...
    a1s: Any = ...
    b1s: Any = ...
    def start(self) -> None: ...
    def step(self) -> None: ...

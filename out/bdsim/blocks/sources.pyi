from bdsim.components import SourceBlock as SourceBlock, block as block
from typing import Any, Optional, Sequence, Tuple
from typing_extensions import Literal as Literal

class Constant(SourceBlock):
    value: Any = ...
    type: str = ...
    def __init__(self, value: Any, **kwargs: Any) -> None: ...
    def output(self, t: Optional[Any] = ...): ...

class WaveForm(SourceBlock):
    wave: Any = ...
    freq: Any = ...
    phase: Any = ...
    min: Any = ...
    mablock: Any = ...
    duty: Any = ...
    amplitude: Any = ...
    offset: Any = ...
    type: str = ...
    def __init__(self, wave: Literal[sine, square, triangle]=..., freq: float=..., unit: Literal['rad/s', Hz]=..., phase: float=..., amplitude: float=..., offset: float=..., min: float=..., max: float=..., duty: float=..., **kwargs: Any) -> None: ...
    def output(self, t: Optional[Any] = ...): ...

class Piecewise(SourceBlock):
    t: Any = ...
    y: Any = ...
    type: str = ...
    def __init__(self, *seq: Sequence[Tuple[float, Any]], **kwargs: Any) -> None: ...
    def output(self, t: Any): ...

class Step(SourceBlock):
    T: Any = ...
    off: Any = ...
    on: Any = ...
    type: str = ...
    def __init__(self, T: float=..., off: float=..., on: float=..., **kwargs: Any) -> None: ...
    def output(self, t: Optional[Any] = ...): ...

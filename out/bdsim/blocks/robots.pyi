from bdsim.blocks.quad_model import MultiRotorModel as MultiRotorModel
from bdsim.components import ArrayLike as ArrayLike, Block as Block, Plug as Plug, TransferBlock as TransferBlock, block as block
from typing import Any, Optional, Union

class Bicycle(TransferBlock):
    nstates: int = ...
    vlim: Any = ...
    slim: Any = ...
    type: str = ...
    L: Any = ...
    def __init__(self, *inputs: Union[Block, Plug], x0: Optional[ArrayLike]=..., L: float=..., vlim: float=..., slim: float=..., **kwargs: Any) -> None: ...
    def output(self, t: Any): ...
    def deriv(self): ...

class Unicycle(TransferBlock):
    nstates: int = ...
    type: str = ...
    def __init__(self, *inputs: Union[Block, Plug], x0: Optional[ArrayLike]=..., **kwargs: Any) -> None: ...
    def output(self, t: Any): ...
    def deriv(self): ...

class DiffSteer(TransferBlock):
    nstates: int = ...
    type: str = ...
    R: Any = ...
    W: Any = ...
    def __init__(self, *inputs: Union[Block, Plug], R: float=..., W: float=..., x0: Optional[ArrayLike]=..., **kwargs: Any) -> None: ...
    def output(self, t: Any): ...
    def deriv(self): ...

class MultiRotor(TransferBlock):
    type: str = ...
    nstates: int = ...
    nrotors: Any = ...
    model: Any = ...
    groundcheck: Any = ...
    speedcheck: Any = ...
    D: Any = ...
    a1s: Any = ...
    b1s: Any = ...
    def __init__(self, model: MultiRotorModel, *inputs: Union[Block, Plug], groundcheck: bool=..., speedcheck: bool=..., x0: Optional[ArrayLike]=..., **kwargs: Any) -> None: ...
    def output(self, t: Optional[Any] = ...): ...
    def deriv(self): ...
